{"version":3,"file":"financialRepository-DohCN_Ha.js","sources":["../../src/shared/components/Table/Table.tsx","../../src/modules/financial/constants/table.constants.ts","../../src/modules/financial/components/FinancialTableCells/TypeCell/TypeCell.tsx","../../src/modules/financial/helpers/currency.helper.ts","../../src/modules/financial/helpers/stock.helper.ts","../../src/modules/financial/components/FinancialTableCells/ValueCell/ValueCell.tsx","../../src/modules/financial/components/FinancialTableCells/VariationCell/VariationCell.tsx","../../src/modules/financial/repositories/cache/cacheService.ts","../../src/shared/services/api.ts","../../src/modules/financial/repositories/api/financialApiService.ts","../../src/modules/financial/repositories/history/historyService.ts","../../src/modules/financial/repositories/mappers/financialDataMapper.ts","../../src/modules/financial/repositories/financialRepository.ts"],"sourcesContent":["import { BodyProps, CellProps, HeaderCellProps, HeadProps, RowProps, TableContextProps, TableProps } from '@shared/types/Table.type';\nimport React, { createContext, useContext } from 'react';\n\nconst TableContext = createContext<TableContextProps>({\n  striped: false,\n  hoverable: false\n});\n\nconst Table = ({ \n  children, \n  striped = false, \n  hoverable = false, \n  className = '' \n}: TableProps) => {\n  return (\n    <TableContext.Provider value={{ striped, hoverable }}>\n      <div className={`overflow-hidden shadow ring-1 ring-secondary-700 ring-opacity-5 sm:rounded-lg ${className}`}>\n        <table className=\"min-w-full divide-y divide-secondary-700\">\n          {children}\n        </table>\n      </div>\n    </TableContext.Provider>\n  );\n};\n\nconst Head = ({ children, className = '' }: HeadProps) => {\n  return (\n    <thead className={`bg-secondary-800 ${className}`}>\n      {children}\n    </thead>\n  );\n};\n\nconst Body = ({ children, className = '' }: BodyProps) => {\n  const { striped } = useContext(TableContext);\n  \n  return (\n    <tbody className={`divide-y divide-secondary-800 bg-secondary-800 ${className}`}>\n      {React.Children.map(children, (child, index) => {\n        if (React.isValidElement(child)) {\n          return React.cloneElement(child, {\n            ...child.props,\n            isEven: striped && index % 2 === 0\n          });\n        }\n        return child;\n      })}\n    </tbody>\n  );\n};\n\nconst Row = ({ children, className = '', isEven = false }: RowProps) => {\n  const { hoverable } = useContext(TableContext);\n  \n  return (\n    <tr className={`\n      ${isEven ? 'bg-secondary-700' : ''}\n      ${hoverable ? 'hover:bg-secondary-600 transition-colors' : ''}\n      ${className}\n    `}>\n      {children}\n    </tr>\n  );\n};\n\nconst HeaderCell = ({ \n  children, \n  className = '', \n  align = 'left' \n}: HeaderCellProps) => {\n  const alignClass = {\n    left: 'text-left',\n    center: 'text-center',\n    right: 'text-right'\n  };\n  \n  return (\n    <th \n      scope=\"col\" \n      className={`px-6 py-3 text-xs font-medium uppercase tracking-wider text-secondary-100 ${alignClass[align]} ${className}`}\n    >\n      {children}\n    </th>\n  );\n};\n\nconst Cell = ({ \n  children, \n  className = 'text-secondary-100', \n  align = 'left',\n  colSpan\n}: CellProps) => {\n  const alignClass = {\n    left: 'text-left',\n    center: 'text-center',\n    right: 'text-right'\n  };\n  \n  return (\n    <td \n      className={`whitespace-nowrap px-6 py-4 text-sm ${alignClass[align]} ${className}`}\n      colSpan={colSpan}\n    >\n      {children}\n    </td>\n  );\n};\n\nTable.Head = Head;\nTable.Body = Body;\nTable.Row = Row;\nTable.HeaderCell = HeaderCell;\nTable.Cell = Cell;\n\nexport { Table };\n","export const QUOTATION_TYPE = {\n    CURRENCY: 'currency',\n    STOCK: 'stock',\n    BITCOIN: 'bitcoin',\n} as const;\n\nexport const QUOTATION_TYPE_LABEL = {\n    [QUOTATION_TYPE.CURRENCY]: 'Moeda',\n    [QUOTATION_TYPE.STOCK]: 'Ação',\n    [QUOTATION_TYPE.BITCOIN]: 'Cripto'\n} as const;\n","import React from 'react';\nimport { QUOTATION_TYPE, QUOTATION_TYPE_LABEL } from '@modules/financial/constants/table.constants';\nimport { Table } from '@shared/components/Table/Table';\n\ninterface TypeCellProps {\n    type: typeof QUOTATION_TYPE[keyof typeof QUOTATION_TYPE];\n}\n\nexport const TypeCell: React.FC<TypeCellProps> = ({ type }) => {\n  return (\n    <Table.Cell>\n      {QUOTATION_TYPE_LABEL[type]}\n    </Table.Cell>\n  );\n};\n","/**\n * Formata um valor em centavos para uma moeda específica\n * @param source Código da moeda (USD, BRL, EUR, etc)\n * @param cents Valor em centavos\n * @returns String formatada com o valor e símbolo da moeda\n */\nexport const formatCurrency = (source: string = 'USD', cents: number = 0): string => {\n    const value = floatToCents(cents) / 100;\n    \n    const currencyConfig: Record<string, { locale: string, currency: string, symbol?: string }> = {\n      USD: { locale: 'en-US', currency: 'USD', symbol: '$' },\n      BRL: { locale: 'pt-BR', currency: 'BRL', symbol: 'R$' },\n      EUR: { locale: 'de-DE', currency: 'EUR', symbol: '€' },\n      GBP: { locale: 'en-GB', currency: 'GBP', symbol: '£' },\n      JPY: { locale: 'ja-JP', currency: 'JPY', symbol: '¥' },\n      CNY: { locale: 'zh-CN', currency: 'CNY', symbol: '¥' },\n      AUD: { locale: 'en-AU', currency: 'AUD', symbol: 'A$' },\n      CAD: { locale: 'en-CA', currency: 'CAD', symbol: 'C$' },\n      CHF: { locale: 'de-CH', currency: 'CHF', symbol: 'CHF' },\n      INR: { locale: 'en-IN', currency: 'INR', symbol: '₹' },\n    };\n    \n    const config = currencyConfig[source] || { locale: 'en-US', currency: source };\n    \n    try {\n      return new Intl.NumberFormat(config.locale, {\n        style: 'currency',\n        currency: config.currency,\n        minimumFractionDigits: 2,\n        maximumFractionDigits: 2,\n      }).format(value);\n    } catch (error) {\n        console.error(`Erro ao formatar valor para a moeda ${source}: ${error}`);\n        const symbol = config.symbol || source;\n        return `${symbol} ${value.toFixed(2)}`;\n    }\n  };  \n  /**\n   * Formata um valor em centavos para uma moeda específica sem o símbolo\n   * @param source Código da moeda (USD, BRL, EUR, etc)\n   * @param cents Valor em centavos\n   * @returns String formatada apenas com o valor numérico\n   */\n  export const formatCurrencyValue = (source: string = 'USD', cents: number = 0): string => {\n    const value = floatToCents(cents) / 100;\n    \n    const currencyConfig: Record<string, { locale: string, decimalSeparator: string, thousandsSeparator: string }> = {\n      USD: { locale: 'en-US', decimalSeparator: '.', thousandsSeparator: ',' },\n      BRL: { locale: 'pt-BR', decimalSeparator: ',', thousandsSeparator: '.' },\n      EUR: { locale: 'de-DE', decimalSeparator: ',', thousandsSeparator: '.' },\n      GBP: { locale: 'en-GB', decimalSeparator: '.', thousandsSeparator: ',' },\n      JPY: { locale: 'ja-JP', decimalSeparator: '.', thousandsSeparator: ',' },\n      CNY: { locale: 'zh-CN', decimalSeparator: '.', thousandsSeparator: ',' },\n      AUD: { locale: 'en-AU', decimalSeparator: '.', thousandsSeparator: ',' },\n      CAD: { locale: 'en-CA', decimalSeparator: '.', thousandsSeparator: ',' },\n      CHF: { locale: 'de-CH', decimalSeparator: '.', thousandsSeparator: '\\'' },\n      INR: { locale: 'en-IN', decimalSeparator: '.', thousandsSeparator: ',' },\n    };\n    \n    const config = currencyConfig[source] || { locale: 'en-US', decimalSeparator: '.', thousandsSeparator: ',' };\n    \n    try {\n      return new Intl.NumberFormat(config.locale, {\n        style: 'decimal',\n        minimumFractionDigits: 2,\n        maximumFractionDigits: 2,\n      }).format(value);\n    } catch (error) {\n        console.error(`Erro ao formatar valor para a moeda ${source}: ${error}`);\n        return value.toFixed(2).replace('.', config.decimalSeparator);\n    }\n  };\n  \n  /**\n   * Retorna apenas o símbolo da moeda\n   * @param source Código da moeda (USD, BRL, EUR, etc)\n   * @returns Símbolo da moeda\n   */\n  export const getCurrencySymbol = (source: string): string => {\n    const symbolMap: Record<string, string> = {\n      USD: '$',\n      BRL: 'R$',\n      EUR: '€',\n      GBP: '£',\n      JPY: '¥',\n      CNY: '¥',\n      AUD: 'A$',\n      CAD: 'C$',\n      CHF: 'CHF',\n      INR: '₹',\n    };\n    \n    return symbolMap[source] || source;\n  };\n  \n  /**\n   * Converte centavos para a unidade principal da moeda\n   * @param cents Valor em centavos\n   * @returns Valor na unidade principal\n   */\n  export const centsToUnit = (cents: number): number => {\n    return cents / 100;\n  };\n  \n  /**\n   * Converte unidade principal para centavos\n   * @param unit Valor na unidade principal\n   * @returns Valor em centavos (inteiro)\n   */\n  export const unitToCents = (unit: number): number => {\n    return Math.round(unit * 100);\n  };\n\n  /**\n * Converte um valor em ponto flutuante para inteiro (centavos)\n * Útil para converter valores de entrada do usuário para armazenamento\n * @param floatValue Valor em ponto flutuante (ex: 125.99)\n * @returns Valor em centavos como inteiro (ex: 12599)\n */\nexport const floatToCents = (floatValue: number): number => {\n    return Math.round(floatValue * 100);\n  };\n  ","/**\n * Formata um preço de ação para exibição\n * Similar ao formato usado no app Stocks da Apple\n * \n * @param price Preço da ação como número de ponto flutuante\n * @param locale Localidade para formatação (padrão: 'en-US')\n * @returns String formatada do preço\n */\nexport const formatStockPrice = (price: number = 0, locale: string = 'en-US'): string => {\n    let fractionDigits = 2;\n    \n    if (price >= 1000) {\n      fractionDigits = 2;\n    } else if (price >= 100) {\n      fractionDigits = 2;\n    } else if (price >= 10) {\n      fractionDigits = 3;\n    } else {\n      fractionDigits = 4;\n    }\n    \n    return new Intl.NumberFormat(locale, {\n      minimumFractionDigits: fractionDigits,\n      maximumFractionDigits: fractionDigits,\n    }).format(price);\n  };\n  \n  /**\n   * Formata a variação de preço (absoluta)\n   * \n   * @param priceChange Variação de preço como número de ponto flutuante\n   * @param locale Localidade para formatação (padrão: 'en-US')\n   * @returns String formatada da variação de preço com sinal\n   */\n  export const formatPriceChange = (priceChange: number, locale: string = 'en-US'): string => {\n    const sign = priceChange > 0 ? '+' : '';\n    const fractionDigits = Math.abs(priceChange) < 10 ? 2 : 2;\n    \n    return `${sign}${new Intl.NumberFormat(locale, {\n      minimumFractionDigits: fractionDigits,\n      maximumFractionDigits: fractionDigits,\n    }).format(priceChange)}`;\n  };\n  \n  /**\n   * Formata a variação percentual\n   * \n   * @param percentChange Variação percentual como número de ponto flutuante\n   * @param locale Localidade para formatação (padrão: 'en-US')\n   * @returns String formatada da variação percentual com sinal e símbolo %\n   */\n  export const formatPercentChange = (percentChange: number, locale: string = 'en-US'): string => {\n    const sign = percentChange > 0 ? '+' : '';\n    \n    return `${sign}${new Intl.NumberFormat(locale, {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    }).format(percentChange)}%`;\n  };\n  \n  /**\n   * Formata um valor de índice de mercado (como S&P 500, Dow Jones, etc.)\n   * \n   * @param indexValue Valor do índice como número de ponto flutuante\n   * @param locale Localidade para formatação (padrão: 'en-US')\n   * @returns String formatada do valor do índice\n   */\n  export const formatMarketIndex = (indexValue: number, locale: string = 'en-US'): string => {\n    return new Intl.NumberFormat(locale, {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    }).format(indexValue);\n  };\n  \n  /**\n   * Formata um valor de volume de negociação\n   * Exibe em K (milhares), M (milhões) ou B (bilhões) dependendo do tamanho\n   * \n   * @param volume Volume como número inteiro\n   * @param locale Localidade para formatação (padrão: 'en-US')\n   * @returns String formatada do volume\n   */\n  export const formatVolume = (volume: number, locale: string = 'en-US'): string => {\n    if (volume >= 1_000_000_000) {\n      return `${new Intl.NumberFormat(locale, { \n        maximumFractionDigits: 2 \n      }).format(volume / 1_000_000_000)}B`;\n    } else if (volume >= 1_000_000) {\n      return `${new Intl.NumberFormat(locale, { \n        maximumFractionDigits: 2 \n      }).format(volume / 1_000_000)}M`;\n    } else if (volume >= 1_000) {\n      return `${new Intl.NumberFormat(locale, { \n        maximumFractionDigits: 1 \n      }).format(volume / 1_000)}K`;\n    } else {\n      return new Intl.NumberFormat(locale).format(volume);\n    }\n  };\n  \n  /**\n   * Formata um valor de market cap (capitalização de mercado)\n   * Exibe em M (milhões), B (bilhões) ou T (trilhões) dependendo do tamanho\n   * \n   * @param marketCap Capitalização de mercado como número\n   * @param locale Localidade para formatação (padrão: 'en-US')\n   * @returns String formatada da capitalização de mercado\n   */\n  export const formatMarketCap = (marketCap: number, locale: string = 'en-US'): string => {\n    if (marketCap >= 1_000_000_000_000) {\n      return `${new Intl.NumberFormat(locale, { \n        maximumFractionDigits: 2 \n      }).format(marketCap / 1_000_000_000_000)}T`;\n    } else if (marketCap >= 1_000_000_000) {\n      return `${new Intl.NumberFormat(locale, { \n        maximumFractionDigits: 2 \n      }).format(marketCap / 1_000_000_000)}B`;\n    } else if (marketCap >= 1_000_000) {\n      return `${new Intl.NumberFormat(locale, { \n        maximumFractionDigits: 2 \n      }).format(marketCap / 1_000_000)}M`;\n    } else {\n      return new Intl.NumberFormat(locale).format(marketCap);\n    }\n  };\n  \n  /**\n   * Determina a cor a ser usada para exibir uma variação de preço\n   * \n   * @param change Variação (pode ser preço ou percentual)\n   * @returns String com nome da cor CSS (para uso com Tailwind ou styled-components)\n   */\n  export const getChangeColor = (change: number): string => {\n    if (change > 0) return 'text-green-500';\n    if (change < 0) return 'text-red-500';\n    return 'text-secondary-500';\n  };\n  \n  /**\n   * Formata um par de valores de alta/baixa do dia\n   * \n   * @param low Valor mais baixo do dia\n   * @param high Valor mais alto do dia\n   * @param locale Localidade para formatação (padrão: 'en-US')\n   * @returns String formatada no estilo \"L: X.XX - H: Y.YY\"\n   */\n  export const formatDayRange = (low: number, high: number, locale: string = 'en-US'): string => {\n    const formattedLow = formatStockPrice(low, locale);\n    const formattedHigh = formatStockPrice(high, locale);\n    \n    return `L: ${formattedLow} - H: ${formattedHigh}`;\n  };\n  \n  /**\n   * Formata um valor de rendimento de dividendos\n   * \n   * @param yield Rendimento como número de ponto flutuante (ex: 2.5 para 2.5%)\n   * @param locale Localidade para formatação (padrão: 'en-US')\n   * @returns String formatada do rendimento com símbolo %\n   */\n  export const formatDividendYield = (yield_: number, locale: string = 'en-US'): string => {\n    return new Intl.NumberFormat(locale, {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    }).format(yield_) + '%';\n  };\n  \n  /**\n   * Formata um valor de P/E (Price to Earnings ratio)\n   * \n   * @param pe Valor de P/E como número de ponto flutuante\n   * @param locale Localidade para formatação (padrão: 'en-US')\n   * @returns String formatada do P/E\n   */\n  export const formatPE = (pe: number, locale: string = 'en-US'): string => {\n    return new Intl.NumberFormat(locale, {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    }).format(pe);\n  };\n  \n/**\n * Converte um valor em ponto flutuante para inteiro (centavos)\n * Útil para converter valores de entrada do usuário para armazenamento\n * @param floatValue Valor em ponto flutuante (ex: 125.99)\n * @returns Valor em centavos como inteiro (ex: 12599)\n */\nexport const floatToCents = (floatValue: number): number => {\n    return Math.round(floatValue * 100);\n  };","import React from 'react';\nimport { Table } from '@shared/components/Table/Table';\nimport { QUOTATION_TYPE } from '@modules/financial/constants/table.constants';\nimport { formatCurrency } from '@modules/financial/helpers/currency.helper';\nimport { formatStockPrice } from '@modules/financial/helpers/stock.helper';\n\ninterface ValueCellProps {\n  type: string;\n  buy?: number;\n  points?: number;\n  source?: string;\n}\n\nexport const ValueCell: React.FC<ValueCellProps> = ({ type, source, buy, points }) => {\n  return (\n    <Table.Cell>\n      {type !== QUOTATION_TYPE.STOCK\n        ? `${formatCurrency(source, buy) || '-'}`\n        : formatStockPrice(points) || '-'}\n    </Table.Cell>\n  );\n};\n","import React from 'react';\nimport { Table } from '@shared/components/Table/Table';\n\ninterface VariationCellProps {\n  variation: number;\n}\n\nexport const VariationCell: React.FC<VariationCellProps> = ({ variation }) => {\n  const getVariationColorClass = (value: number): string => {\n    if (value > 0) return 'text-green-500';\n    if (value < 0) return 'text-red-500';\n    return 'text-secondary-300';\n  };\n\n  return (\n    <Table.Cell className={getVariationColorClass(variation)}>\n      {variation.toFixed(2)}%\n    </Table.Cell>\n  );\n};\n","const CACHE_EXPIRATION_TIME = 3 * 60 * 1000;\n\ninterface CacheItem<T> {\n  data: T;\n  timestamp: number;\n}\n\nexport class CacheService {\n  private cache: Map<string, CacheItem<unknown>> = new Map();\n\n  get<T>(key: string): T | null {\n    const cachedItem = this.cache.get(key);\n    \n    if (!cachedItem) return null;\n    \n    const now = Date.now();\n    if (now - cachedItem.timestamp > CACHE_EXPIRATION_TIME) {\n      this.cache.delete(key);\n      return null;\n    }\n    \n    return cachedItem.data as T;\n  }\n  \n  set<T>(key: string, data: T): void {\n    this.cache.set(key, {\n      data,\n      timestamp: Date.now()\n    });\n  }\n  \n  getExpired<T>(key: string): T | null {\n    const cachedItem = this.cache.get(key);\n    return cachedItem ? cachedItem.data as T : null;\n  }\n  \n  clear(key?: string): void {\n    if (key) {\n      this.cache.delete(key);\n    } else {\n      this.cache.clear();\n    }\n  }\n}\n\nexport const cacheService = new CacheService();\n","import axios, { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';\n\nconst API_KEY = import.meta.env.VITE_API_KEY || '';\n\nconst createAxiosInstance = (baseURL: string) => {\n  const instance = axios.create({\n    baseURL,\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n\n  instance.interceptors.response.use(\n    (response) => response,\n    (error: AxiosError) => {\n      return Promise.reject(error);\n    }\n  );\n\n  return instance;\n};\n\nconst appendApiKey = (url: string, apiKey: string): string => {\n  if (!apiKey) {\n    console.warn('API key is not set. Requests might fail.');\n    return url;\n  }\n  \n  return `${url}?format=json-cors&key=${apiKey}`;\n};\n\nconst handleError = (error: AxiosError): never => {\n  console.error('API Error:', error.response?.data || error.message);\n  throw error;\n};\n\nexport const createHttpService = (baseURL: string, apiKey: string = API_KEY) => {\n  const axiosInstance = createAxiosInstance(baseURL);\n\n  return {\n    async get<T>(url: string, config?: AxiosRequestConfig): Promise<T> {\n      try {\n        const urlWithKey = appendApiKey(url, apiKey);\n        const response: AxiosResponse<T> = await axiosInstance.get(urlWithKey, config);\n        return response.data;\n      } catch (error) {\n        return handleError(error as AxiosError);\n      }\n    },\n\n    async post<T>(url: string, data?: unknown, config?: AxiosRequestConfig): Promise<T> {\n      try {\n        const urlWithKey = appendApiKey(url, apiKey);\n        const response: AxiosResponse<T> = await axiosInstance.post(urlWithKey, data, config);\n        return response.data;\n      } catch (error) {\n        return handleError(error as AxiosError);\n      }\n    },\n\n    async put<T>(url: string, data?: unknown, config?: AxiosRequestConfig): Promise<T> {\n      try {\n        const urlWithKey = appendApiKey(url, apiKey);\n        const response: AxiosResponse<T> = await axiosInstance.put(urlWithKey, data, config);\n        return response.data;\n      } catch (error) {\n        return handleError(error as AxiosError);\n      }\n    },\n\n    async delete<T>(url: string, config?: AxiosRequestConfig): Promise<T> {\n      try {\n        const urlWithKey = appendApiKey(url, apiKey);\n        const response: AxiosResponse<T> = await axiosInstance.delete(urlWithKey, config);\n        return response.data;\n      } catch (error) {\n        return handleError(error as AxiosError);\n      }\n    }\n  };\n};\n\nconst financeApi = createHttpService('https://api.hgbrasil.com');\n\nexport default financeApi;","import financeApi from '@shared/services/api';\nimport { FinancialResponse } from '@modules/financial/types/FinancialData.type';\n\nconst financialRoutes = {\n  getQuotations: () => '/finance',\n};\n\nexport class FinancialApiService {\n  async fetchQuotations(): Promise<FinancialResponse> {\n    const response = await financeApi.get<FinancialResponse>(financialRoutes.getQuotations());\n    return response;\n  }\n}\n\nexport const financialApiService = new FinancialApiService();\n","import { FinancialData, FinancialResponse } from '@modules/financial/types/FinancialData.type';\n\nexport class HistoryService {\n  saveQuotationHistory(quotation: FinancialData): void {\n    const now = new Date();\n    const history = JSON.parse(localStorage.getItem(`history_${quotation.id}`) || '[]');\n    \n    history.push({\n      ...quotation,\n      timestamp: now.getTime()\n    });\n    \n    localStorage.setItem(`history_${quotation.id}`, JSON.stringify(history));\n  }\n  \n  getQuotationHistory(quotationId: string): FinancialResponse[] {\n    return JSON.parse(localStorage.getItem(`history_${quotationId}`) || '[]');\n  }\n}\n\nexport const historyService = new HistoryService();\n","import { AssetItem, CurrencyItem, FinancialData, FinancialResponse } from '@modules/financial/types/FinancialData.type';\n\nexport class FinancialDataMapper {\n  mapResponseToFinancialData(response: FinancialResponse): FinancialData[] {\n    const results = response.results;\n    const { source = 'USD' } = results.currencies || {};\n    \n    const currencies = this.mapCurrencies(results.currencies || {}, source.toString());\n    const stocks = this.mapStocks(results.stocks || {});\n    const bitcoin = this.mapBitcoin(results.bitcoin || {}, source.toString());\n    \n    return [...currencies, ...stocks, ...bitcoin];\n  }\n  \n  private mapCurrencies(currencies: Record<string, CurrencyItem>, source: string): FinancialData[] {\n    return Object.entries(currencies)\n      .filter(([key]) => key !== 'source')\n      .map(([key, value]: [string, CurrencyItem]) => ({\n        id: key,\n        source: source,\n        name: value.name,\n        buy: value.buy,\n        sell: value.sell,\n        variation: value.variation,\n        type: 'currency' as const\n      })).slice(0, 3);\n  }\n  \n  private mapStocks(stocks: Record<string, AssetItem>): FinancialData[] {\n    return Object.entries(stocks)\n      .map(([key, value]: [string, AssetItem]) => ({\n        id: key,\n        name: value.name,\n        location: value.location,\n        points: value.points,\n        variation: value.variation,\n        type: 'stock' as const\n      })).slice(0, 3);\n  }\n  \n  private mapBitcoin(bitcoin: Record<string, CurrencyItem>, source: string): FinancialData[] {\n    return Object.entries(bitcoin)\n      .map(([key, value]: [string, CurrencyItem]) => ({\n        id: key,\n        name: value.name,\n        source: source,\n        buy: value.buy,\n        sell: value.sell,\n        variation: value.variation,\n        type: 'bitcoin' as const\n      })).slice(0, 4);\n  }\n}\n\nexport const financialDataMapper = new FinancialDataMapper();\n","import { FinancialData } from '@modules/financial/types/FinancialData.type';\nimport { cacheService } from './cache';\nimport { financialApiService } from './api';\nimport { historyService } from './history';\nimport { financialDataMapper } from './mappers';\n\nexport const financialRepository = {\n  async getQuotations(): Promise<FinancialData[]> {\n    const cacheKey = 'quotations';\n    \n    try {\n      const cachedData = cacheService.get<FinancialData[]>(cacheKey);\n      if (cachedData) {\n        return cachedData;\n      }\n      \n      const response = await financialApiService.fetchQuotations();\n      const processedData = financialDataMapper.mapResponseToFinancialData(response);\n      \n      cacheService.set(cacheKey, processedData);\n      \n      return processedData;\n    } catch (error) {\n      console.error('Erro ao buscar cotações:', error);\n      \n      const expiredCache = cacheService.getExpired<FinancialData[]>(cacheKey);\n      if (expiredCache) {\n        return expiredCache;\n      }\n      \n      return [];\n    }\n  },\n  \n  clearCache(key?: string): void {\n    cacheService.clear(key);\n  },\n  \n  saveQuotationHistory(quotation: FinancialData): void {\n    historyService.saveQuotationHistory(quotation);\n  },\n  \n  getQuotationHistory(quotationId: string) {\n    return historyService.getQuotationHistory(quotationId);\n  }\n};\n"],"names":["TableContext","createContext","Table","children","striped","hoverable","className","jsx","Head","Body","useContext","React","child","index","Row","isEven","HeaderCell","align","alignClass","Cell","colSpan","QUOTATION_TYPE","QUOTATION_TYPE_LABEL","TypeCell","type","formatCurrency","source","cents","value","floatToCents","config","error","floatValue","formatStockPrice","price","locale","fractionDigits","ValueCell","buy","points","VariationCell","variation","getVariationColorClass","CACHE_EXPIRATION_TIME","CacheService","__publicField","key","cachedItem","data","cacheService","API_KEY","createAxiosInstance","baseURL","instance","axios","response","appendApiKey","url","apiKey","handleError","_a","createHttpService","axiosInstance","urlWithKey","financeApi","financialRoutes","FinancialApiService","financialApiService","HistoryService","quotation","now","history","quotationId","historyService","FinancialDataMapper","results","currencies","stocks","bitcoin","financialDataMapper","financialRepository","cacheKey","cachedData","processedData","expiredCache"],"mappings":"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"}